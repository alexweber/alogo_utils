<?php

/**
 * @file Alogo Utils
 */

/**
 * Inserts or updated a record in the database based on a schema.
 * This function aims at overcoming the fact that we don't always know if its an
 *   insert or update operation - which makes using drupal_write_record() not an option
 * We use REPLACE INTO queries to work around this
 * 
 * @param string $table
 * @param stdClass $object 
 * @return bool
 */
function alogo_write_record($table, &$object) {
  $schema = drupal_get_schema($table);

  if (!$schema) {
    return FALSE;
  }

  $pks = $schema['primary key'];

  $query = "REPLACE INTO {$schema['name']} (";
  $query .= implode(', ', array_keys($schema['fields']));
  $query .= ') VALUES (';

  $placeholders = array();
  $quotes = array();

  foreach ($schema['fields'] as $k => $v) {
    // determine variable type
    if (strpos('int', $v['type']) !== FALSE) {
      $quotes = FALSE;
      $placeholder = '%d';
    }
    else if (strpos('float', $v['type']) !== FALSE || strpos('double', $v['type']) !== FALSE) {
      $quotes = FALSE;
      $placeholder = '%f';
    }
    else {
      // primary keys shouldn't really be binary in the first place
      $placeholder = '%s';
      $quotes = TRUE;
    }

    $placeholders[] = $placeholder;
    $quotes[] = $quotes;
  }

  for ($i = 0, $n = count($placeholders); $i < $n; ++$i) {
    if ($quotes[$i]) {
      $query .= '"';
    }

    $query .= $placeholders[$i];

    if ($quotes[$i]) {
      $query .= '"';
    }

    if ($i !== ($n - 1)) {
      $query .= ", ";
    }
  }

  $query .= ")";

  $array = (array) $object;
  $result = db_query($query, $array);
  return (bool) $result;
}

/**
 * Retrieve a record from the databased based on a schema.
 * 
 * @param string $table
 * @param mixed $key A single value or an array of values
 * @return array
 */
function alogo_read_record($table, $key) {
  $key = (array) $key;
  $schema = drupal_get_schema($table);

  if (!$schema) {
    return FALSE;
  }

  $pks = $schema['primary key'];

// make sure we have the same ammount of values as we do primary keys
  $count = count($key);
  if ($count !== count($pks)) {
    return FALSE;
  }

// build query
  $query = "SELECT * FROM {$schema['name']} WHERE";

  for ($i = 0; $i < $count; ++$i) {
// escape % signs
    $name = str_replace('%', '%%', $pks[$i]);
    $query .= " {$name} = ";

// determine variable type
    if (is_numeric($key[$i])) {
      $quotes = FALSE;
      if (is_int($key[$i]) || ctype_digit($key[$i])) {
        $placeholder = '%d';
      }
      else {
        $placeholder = '%f';
      }
    }
    else {
      // primary keys shouldn't really be binary in the first place
      $placeholder = '%s';
      $quotes = TRUE;
    }

    if ($quotes) {
      $query .= '"';
    }

    $query .= $placeholder;

    if ($quotes) {
      $query .= '"';
    }
  }

  $result = db_query($query, $key);
  return db_fetch_object($result);
}

/**
 * Returns whether a user has a particular role
 * Roles can either be a numeric RID or a string
 * 
 * @param int|string $role
 * @param int|stdClass $uid 
 * @return bool
 */
function alogo_user_has_role($role, $user = NULL) {
  // defalts to current user
  if (!isset($user)) {
    global $user;
  }
  // accept a uid
  else {
    if (is_numeric($user)) {
      $user = user_load($user);
    }
  }

  // make sure we have a valid user object
  if (is_object($user) && isset($user->roles) && is_array($user->roles)) {
    return (is_numeric($role)) ? in_array($role, array_keys($user->roles)) : in_array($role, $user->roles);
  }

  return FALSE;
}

/**
 * Implementation of hook_cron().
 */
function alogo_utils_cron() {
  $resource = db_query("SHOW tables");
  $tables = array();

  while ($row = db_result($resource)) {
    $tables[] = $row;
  }

  db_query('OPTIMIZE TABLE ' . implode(', ', $tables));
}

/**
 * Convert a string to a slug, safe for use in urls
 * @param string
 * @return string
 */
function alogo_to_slug($string) {
  $string = str_replace(array('/', ' ', '&'), '-', $string);
  $accents = '/&([A-Za-z]{1,2})(tilde|grave|acute|circ|cedil|uml|lig);/';
  return urlencode(strtolower(preg_replace($accents, '$1', htmlentities(utf8_decode($string)))));
}

/**
 * Return absolute drupal site root
 * @return string
 */
function alogo_docroot() {
  $absolute_dir = dirname(__FILE__);
  $relative_dir = drupal_get_path('module', 'alogo_utils');
  return substr($absolute_dir, 0, -1 * (1 + strlen($relative_dir)));
}

/**
 * Wrapper around krumo() that includes the class if not already done
 * This is useful for debugging hook_init() and other places where krumo isn't normally available
 */
function alogo_krumo() {
  include_once drupal_get_path('module', 'devel') . '/krumo/class.krumo.php';
  krumo(func_get_args());
}

/**
 * Calculate age from birthday
 * @param string $bday
 *  - birthday (dd-mm-yyyy)
 */
function alogo_get_age($bday) {
  list ($d, $m, $y) = explode('-', $bday);
  $yd = date('Y') - $y;

  if (date('md') < $m . $d) {
    --$yd;
  }

  return $yd;
}

/**
 * Clean the string removing all characters except the digits
 * Talen from the module "Brazilian IDs"
 *
 * @param $cpf
 *   Original "dirty" cpf
 * @return
 *   Returns the clean cpf
 */
function alogo_clean_cpf($cpf) {
  return preg_replace('/[^0-9]/', '', $cpf);
}

/**
 * Clean the string removing all characters except the digits
 * Talen from the module "Brazilian IDs"
 *
 * @param $cnpj
 *   Original "dirty" cnpj
 * @return
 *   Returns the clean cnpj
 */
function alogo_clean_cnpj($cnpj) {
  return preg_replace('/[^0-9]/', '', $cnpj);
}

/**
 * Validação de CPF
 * @param string $cpf
 * @param bool $strict
 * @return bool
 */
function alogo_validate_cpf($cpf, $strict = FALSE) {
  if ($strict === FALSE) {
    $regex = '/^[0-9]{3}(.)?[0-9]{3}(.)?[0-9]{3}(-)?[0-9]{2}$/';
    return (bool) preg_match($regex, $cpf);
  }
  else {
    $cpf = alogo_clean_cpf($cpf);
    $forbidden = array('00000000000', '11111111111', '22222222222', '33333333333', '44444444444', '55555555555', '66666666666', '77777777777', '88888888888', '99999999999');

// Check if its not a forbidden combination
    if (drupal_strlen($cpf) !== 11 || in_array($cpf, $forbidden)) {
      return FALSE;
    }

// Check the 11st and 12nd numbers
    for ($numbers = 9; $numbers <= 10; $numbers++) {
      $digit = 0;

      for ($i = 0; $i < $numbers; $i++) {
        $digit += $cpf{$i} * ($numbers + 1 - $i);
      }

      // Calculate the digit and check it
      $digit = 11 - ($digit % 11);

      if ($digit == 10 or $digit == 11) {
        $digit = 0;
      }

      if ($digit != $cpf{$numbers}) {
        return FALSE;
      }
    }

    return TRUE;
  }
}

/**
 * Informa se o CPF é único
 * Função feita para uso com o content_profile
 *
 * @param string $cpf
 * @param int $uid
 * @param string $profile_table
 * @param string $profile_field
 * @return bool
 */
function alogo_unique_cpf($cpf, $uid = NULL, $profile_table = 'content_type_profile', $profile_field = 'field_profile_cpf_value') {
  $cpf_dirty = alogo_clean_cpf($cpf);

  $query = <<<SQL
SELECT COUNT(*) FROM {$profile_table} ctt
INNER JOIN node n ON ctt.nid = n.nid
WHERE ctt.{$profile_field} = '%s' OR ctt.{$profile_field} = '%s'
SQL;
  $args = array($cpf, $cpf_dirty);

  if ($uid) {
    $query .= " AND n.uid <> %d";
    $args[] = $uid;
  }

  array_unshift($args, $query);
  $resource = call_user_func_array('db_query', $args);
  $result = db_result($resource);
  return $result == 0;
}

/**
 * Informa se o CNPJ é único
 * Função feita para uso com o content_profile
 *
 * @param string $cnpj
 * @param int $uid
 * @param string $profile_table
 * @param string $profile_field
 * @return bool
 */
function alogo_unique_cnpj($cnpj, $uid = NULL, $profile_table = 'content_type_profile', $profile_field = 'field_profile_cnpj_value') {
  $query = <<<SQL
SELECT COUNT(*) FROM {$profile_table} ctt
INNER JOIN node n ON ctt.nid = n.nid
WHERE ctt.{$profile_field} = '%s' OR ctt.{$profile_field} = '%s'
SQL;
  $args = array($cnpj, $cnpj_dirty);

  if ($uid) {
    $query .= " AND n.uid <> %d";
    $args[] = $uid;
  }

  array_unshift($args, $query);
  $resource = call_user_func_array('db_query', $args);
  $result = db_result($resource);
  return $result == 0;
}

/**
 * Validação de CNPJ
 * @param string $cnpj
 * @return bool
 */
function alogo_validate_cnpj($cnpj) {
  $cnpj_dirty = $cnpj;
  $cnpj = alogo_clean_cnpj($cnpj);

  $forbidden = array('00000000000000', '11111111111111', '22222222222222', '33333333333333', '44444444444444', '55555555555555', '66666666666666', '77777777777777', '88888888888888', '99999999999999');
  
  // Check if its not a forbidden combination
  if (drupal_strlen($cnpj) !== 14 || in_array($cnpj, $forbidden)) {
    return FALSE;
  }

  $i = 0;
  while ($i < 14) {
    $cnpj_d[$i] = drupal_substr($cnpj, $i, 1);
    $i++;
  }

  $digit = ($cnpj[0] * 5) + ($cnpj[1] * 4) + ($cnpj[2] * 3) + ($cnpj[3] * 2) +
    ($cnpj[4] * 9) + ($cnpj[5] * 8) + ($cnpj[6] * 7) + ($cnpj[7] * 6) +
    ($cnpj[8] * 5) + ($cnpj[9] * 4) + ($cnpj[10] * 3) + ($cnpj[11] * 2);

// Calculate the digit and check it
  $digit = 11 - ($digit % 11);
  if ($digit == 10 or $digit == 11) {
    $digit = 0;
  }

  if ($digit != $cnpj{12}) {
    return FALSE;
  }

  $digit = ($cnpj[0] * 6) + ($cnpj[1] * 5) + ($cnpj[2] * 4) +
    ($cnpj[3] * 3) + ($cnpj[4] * 2) + ($cnpj[5] * 9) + ($cnpj[6] * 8) +
    ($cnpj[7] * 7) + ($cnpj[8] * 6) + ($cnpj[9] * 5) + ($cnpj[10] * 4) +
    ($cnpj[11] * 3) + ($digit * 2);

// Calculate the digit and check it
  $digit = 11 - ($digit % 11);
  if ($digit == 10 or $digit == 11) {
    $digit = 0;
  }

  if ($digit != $cnpj{13}) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Returns a fully-processed node form as an array
 * This should work in cases where drupal_retrieve_form() doesn't
 * 
 * @param string $type 
 * @return array
 */
function alogo_get_node_form($type) {
  $node = new StdClass();
  $node_state = array();
  $node->type = $type;
  // for some reason this isn't always included when we need it
  module_load_include('inc', 'node', 'node.pages');
  // grab the node form
  $node_form = node_form($node_state, $node);
  // run all hooks
  drupal_prepare_form("{$type}_node_form", $node_form);
  // there, we have the full node form as an array, horray
  return $node_form;
}

/**
 * Returns whether the email address is unique or not
 * This is necessary in cases when we have a custom registration workflow
 * 
 * @param string $email 
 * @return bool
 */
function alogo_unique_email($email) {
  $query = "SELECT COUNT(*) FROM users WHERE mail = '%s'";
  $result = db_result(db_query($query, $email));
  return $result === 0;
}